//naive approach

class Solution {
  public:
  
    int edit(string s, string t, int m, int n)
    {
        if(m==0)
        {
            return n;
        }
        if(n==0)
        {
            return m;
        }
        if(s[m-1]==t[n-1])
        {
            return edit(s, t, m-1, n-1);
        }
        else
        {
            return 1 + min(edit(s,t,m,n-1), min(edit(s,t,m-1,n-1), edit(s,t,m-1,n)));
        }
    }
    int editDistance(string s, string t) {
        // Code here
        int m = s.size();
        int n = t.size();
        
        return edit(s, t, m, n);
        
    }
};

//memorisation

class Solution {
  public:
  
    int edit(string s, string t, int m, int n)
    {
        int dp[m+1][n+1];
        for(int i=0; i<=n; i++)
        {
            dp[0][i]=i;
        }
        for(int j=0; j<=m; j++)
        {
            dp[j][0]=j;
        }
        
        for(int i=1; i<=m; i++)
        {
            for(int j=1; j<=n; j++)
            {
                if(s[i-1]==t[j-1])
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=1+min({dp[i][j-1],dp[i-1][j-1], dp[i-1][j]});
                }
            }
            
                 
        }
       
      return dp[m][n];    
    }
    int editDistance(string s, string t) {
        // Code here
        int m = s.size();
        int n = t.size();
        
        return edit(s, t, m, n);
        
    }
};
